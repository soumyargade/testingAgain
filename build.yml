jobs:
  - name: itrust-build
    repo: https://{{username}}:{{token}}@github.ncsu.edu/engr-csc326-staff/iTrust2-v10.git
    build:
      setup: # NEW
        - name: Build environment
          steps:
            - name: Setup & Updates
              run: 'sudo apt-get update -yqq && sudo apt-get upgrade -yqq'
            - name: Install Dependencies
              run: 'sudo apt-get install -yqq python3-pip openjdk-11-jdk git maven docker.io'
      steps:
        - name: Setup MySql
          run: 'sudo docker run --name mysql --network host -e MYSQL_ROOT_PASSWORD={{root_pass}} -d mysql:8.0'
        - name: Copy application.yml file
          run: 'cp {{job_loc}}/iTrust2/src/main/resources/application.yml.template {{job_loc}}/iTrust2/src/main/resources/application.yml'
        - name: Copy database password into application.yml file
          run: 'sudo sed -i "s/password\:/password\:\ {{root_pass}}/g" {{job_loc}}/iTrust2/src/main/resources/application.yml'
        - name: Build iTrust
          run: 'cd {{job_loc}}/iTrust2/ && mvn --batch-mode --update-snapshots clean test'
        - name: Create jar file for deployment
          run: 'cd {{job_loc}}/iTrust2/ && mvn package'
  - name: itrust-deploy
    deploy:
      type: green-blue
      provider: azure
      inventory: 'inventory'
      artifacts:
        - source: '~/itrust-build/iTrust2/target/iTrust2-10.jar'
          dest: '~/iTrust2-10.jar'
      steps:
        - name: Run iTrust2
          run: 'java -jar ~/iTrust2-10.jar'
  - name: mutation-coverage
    repo: https://github.com/chrisparnin/checkbox.io-micro-preview
    build:
      steps:
        - name: Mutation Testing
          mutation:
            mutate:
              - 'marqdown.js'
            iterations: 1000
            init: 'npm install'
            snapshot:
              run: 'node index.js'
              collect:
                - 'http://localhost:3000/survey/long.md'
                - 'http://localhost:3000/survey/upload.md'
                - 'http://localhost:3000/survey/survey.md'
                - 'http://localhost:3000/survey/variations.md'
  - name: focalboard
    repo: https://github.com/mattermost/focalboard.git
    build:
      setup:
        - name: initial setup
          steps:
            - name: add golang repo
              run: 'sudo add-apt-repository ppa:longsleep/golang-backports'
            - name: setup & updates
              run: 'sudo apt-get update -y'
            - name: install dependencies
              run: 'sudo apt-get install -y docker.io make golang-go xvfb libgtk-3-0'
            - name: check version # debugging
              run: 'go version'
      steps:
        ######################### BUILD #########################
        - name: build docker image
          run: 'cd {{job_loc}} && sudo docker build -f docker/Dockerfile -t focalboard .'
        - name: prebuild
          run: 'cd {{job_loc}} && make prebuild'
        - name: local build
          run: 'cd {{job_loc}} && make'
        ######################### TEST ##########################
        - name: server unit tests
          run: 'cd {{job_loc}} && make server-test'
        - name: web app ESLint
          run: 'cd {{job_loc}}/webapp/ && npm run check'
        - name: web app unit tests
          run: 'cd {{job_loc}}/webapp/ && npm run test'
        - name: web app UI tests
          run: 'cd {{job_loc}}/webapp/ && npm run cypress:ci'
    ######################### DEPLOY/RELEASE #########################
    deploy:
      type: docker-container
      steps:
        - name: deploy the container
          run: 'cd {{job_loc}} && sudo docker run -d -p 80:8000 focalboard'
        - name: confirm container is up
          run: 'cd {{job_loc}} && sudo docker ps' # debugging
  - name: wger
    repo: https://github.com/wger-project/wger.git
    build:
      setup:
        - name: initial setup
          steps:
            - name: install necessary packages
              run: 'sudo npm install -g yarn sass'
            - name: install dependencies
              run: 'sudo apt-get install -yqq python3-pip docker.io'
      steps:
        ######################### BUILD #########################
        - name: build docker image
          run: 'cd {{job_loc}} && sudo docker build -f extras/docker/demo/Dockerfile -t wger .'
        - name: install python requirements
          run: 'cd {{job_loc}} && sudo pip install -r requirements_dev.txt'
        - name: install more python reqs
          run: 'cd {{job_loc}} && sudo pip install -e .'
        - name: create settings
          run: 'cd {{job_loc}} && wger create-settings'
        - name: local build & bootstrap
          run: 'cd {{job_loc}} && wger bootstrap'
        - name: populate with data on first run
          run: 'cd {{job_loc}} && wger load-online-fixtures'
        #- name: confirm server is up
        #  run: 'cd {{job_loc}} && python manage.py runserver'
        ######################### TEST ##########################
        - name: run entire testing suite
          run: 'cd {{job_loc}} && python3 manage.py test'
    ######################### DEPLOY/RELEASE #########################
    deploy:
      type: docker-container
      steps:
        - name: deploy the container
          run: 'cd {{job_loc}} && sudo docker run -d -p 80:8000 wger'
        - name: confirm container is up
          run: 'cd {{job_loc}} && sudo docker ps' # debugging